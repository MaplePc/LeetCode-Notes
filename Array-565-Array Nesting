A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.

Suppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]… By that analogy, we stop adding right before a duplicate element occurs in S.

Example 1:
Input: A = [5,4,0,3,1,6,2]
Output: 6
Explanation: 
A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.

One of the longest S[K]:
S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}
Note:
N is an integer within the range [1, 20,000].
The elements of A are all distinct.
Each element of A is an integer within the range [0, N-1].
========================================================
class Solution {
    public int arrayNesting(int[] nums) {
        int len = nums.length;
        boolean[] count = new boolean[len];
        int res = 1;
        int num = 1; //每一个序列的长度

        //下标集合: set={0, 1, 2, 3..., n-1}
        //每一个序列: S[i] = {A[i], A[A[i]], A[A[A[i]]], ..., A[..A[i]] = i},都是对下标集合set的划分
        //每一个数组元素只能出现在一个序列中(序列中元素的顺序是可以依次循环的)
        for(int i = 0; i < len; i++){ //i为下标
            if(count[i] == false){
                count[i] = true;
                num = 1;
                for(int j = i; nums[j] != i; j = nums[j]){
                    count[j] = true;
                    num++;
                }
                if(num > res)
                    res = num;
            }
        }
        return res;
    }
}
//83%
