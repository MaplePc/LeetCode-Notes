We are given an array A of positive integers, and two positive integers L and R (L <= R).

Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least L and at most R.

Example :
Input: 
A = [2, 1, 4, 3]
L = 2
R = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
Note:

L, R  and A[i] will be an integer in the range [0, 10^9].
The length of A will be in the range of [1, 50000].
===========================
class Solution {
    public int numSubarrayBoundedMax(int[] A, int L, int R) {
        int leftCount = 0; //右边<L的数的个数
        int count = 0; //右边子数组的个数
        int res = 0;
        for(int i = 0; i < A.length; i++){
            if(A[i] < L){
                leftCount++;
                res += count;
            }
            else if(A[i] > R){
                count = 0;
                leftCount = 0;
            }
            else{
                count += leftCount + 1;
                res += count;
                leftCount = 0;
            }
        }
        return res;
    }
}
//固定子数组的右端, 统计左端点的种数
//右端不断向右移动
//O(n), 30%-40%
