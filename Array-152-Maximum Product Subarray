Find the contiguous subarray within an array (containing at least one number) which has the largest product.

For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6.
=============================================
class Solution {
    public int maxProduct(int[] nums) {
        int len = nums.length;
        int[] max = new int[len + 1]; //以当前元素结束的积的最大值(可正可负可0)
        max[0] = 1;
        int[] min = new int[len + 1]; //以当前元素结束的积的最小的负数或0(0是默认值)
        min[0] = 0;
        
        for(int i = 0; i < len; i++){
            if(nums[i] == 0) //max[i + 1] = 0
                continue;
            else if(nums[i] > 0){ //正数
                max[i + 1] = Math.max(max[i], 1) * nums[i]; //max[i + 1] >= nums[i](nums[i]是正数)
                min[i + 1] = min[i] * nums[i]; //min[i + 1] <= 0
            }
            else{ //负数
                min[i + 1] = Math.min(nums[i], nums[i] * max[i]); //max[i]<0时,取nums[i]; max[i]>=0时,取nums[i]*max[i]
                
                if(min[i] == 0)
                    max[i + 1] = nums[i]; //max[i + 1]只能取nums[i]负数
                else
                    max[i + 1] = nums[i] * min[i]; //负负得正
            }
        }
        
        int res = max[1];
        for(int i = 2; i <= len; i++){
            if(res < max[i])
                res = max[i];
        }
        return res;
    }
}

//89%
