class Solution {
    public int searchInsert(int[] nums, int target) {
        int l = 0; //定义为最终插入的位置或与target值相同的下标; 在搜索的过程中[l, r]的值都有可能是l最终的值
        int r = nums.length; //右边界
        int mid = 0;
        
        while(l < r){
            mid = l + (r - l) / 2;
            if(target > nums[mid]){
                l = mid + 1; //如果>a[mid], 那么l一定在mid之后
            }
            else{
                r = mid; //如果<=a[mid], 那么l的最终值只可能在mid和mid之前的位置, 所以令r = mid(此处不对==a[mid]的情况进行判断, 因为这种情况是比较少的, 如果考虑这种情况的话会使得判断<a[mid]的次数增多很多)
            }
        }        
        return l;
    }
}
