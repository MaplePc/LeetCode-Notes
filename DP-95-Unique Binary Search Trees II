Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
===================================
class Solution {
		List<TreeNode>[] dp;

		public List<TreeNode> generateTrees(int n) {
			dp = new List[n + 2];
			dp[0] = null;
			TreeNode first = new TreeNode(1);
			first.right = first.left = null;
			dp[1] = new LinkedList<>();
			dp[1].add(first);
			for (int i = 2; i <= n; i++) { //迭代
				dp[i] = new LinkedList<>();
				int j = 0; //j + 1为root
				for (; j < i; j++) { //j为左子树元素个数, n-1-j为右子树元素个数
					List<TreeNode> leftTrees = G(j, 0);
					List<TreeNode> rightTrees = G(i - 1 - j, j + 1);
					if (leftTrees != null && rightTrees != null)
						for (TreeNode l : leftTrees) {
							for (TreeNode r : rightTrees) {
								TreeNode root = new TreeNode(j + 1);
								root.left = l;
								root.right = r;
								dp[i].add(root);
							}
						}
					else if(leftTrees != null)
						for(TreeNode l : leftTrees){
							TreeNode root = new TreeNode(j + 1);
							root.left = l;
							root.right = null;
							dp[i].add(root);
						}
					else if(rightTrees != null)
						for(TreeNode r : rightTrees){
							TreeNode root = new TreeNode(j + 1);
							root.left = null;
							root.right = r;
							dp[i].add(root);
						}
					else{
						TreeNode root = new TreeNode(j + 1);
						root.left = root.right = null;
						dp[i].add(root);
					}
				}
			}
            dp[0] = new LinkedList<>();
			return dp[n];
		}

		public List<TreeNode> G(int n, int offset) { //将森林中所有结点值偏移offset
			if (offset == 0 || n == 0) //偏移量为0或者树中元素个数为0
				return dp[n];
			List<TreeNode> trees = new LinkedList<>();
			for (TreeNode old : dp[n]) 
				trees.add(helper(old, offset));
			return trees;
		}

		public TreeNode helper(TreeNode tree, final int offset) { //将树中所有结点值偏移offset
			if (tree == null)
				return null;
			TreeNode newTree = new TreeNode(tree.val + offset);
			newTree.left = helper(tree.left, offset);
			newTree.right = helper(tree.right, offset);
			return newTree;
		}
	}
//G(n, 0)为所求的森林
//G1(,)#G2(,)表示分别从G1森林里取一颗树作为左子树, 从G2森林里取一颗树作为右子树的所有组合
//G(n, 0) = G(0, 0)#G(n-1, 1) U G(1, 0)#G(n-2, 2) U ... U G(n-1, 0)#G(0, n)
//76%
