Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]
=========================================================
class Solution {
	public List<Integer> findDisappearedNumbers(int[] nums) {
		int len = nums.length;
		for (int i = 0; i < len; i++) {
			if (nums[i] == i + 1) // 如果位置正确, nums[i] 应该等于 i + 1
				continue;
			int t1 = nums[nums[i] - 1];
			nums[nums[i] - 1] = nums[i];
			while (true) {          //使用两个变量t1, t2作为中间变量, 存储不在正确位置的值, 然后放到正确的位置
				if (t1 == nums[t1 - 1])
					break;
				int t2 = nums[t1 - 1];
				nums[t1 - 1] = t1;

				if (t2 == nums[t2 - 1])
					break;
				t1 = nums[t2 - 1];
				nums[t2 - 1] = t2;
			}
		}

		List<Integer> list = new ArrayList<>(len);
		for (int i = 0; i < len; i++) {
			if (nums[i] != i + 1)
				list.add(i + 1);
		}
		return list;
	}

}
//65%
