Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]
=========================================================
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        int len = nums.length;
        for(int i = 0; i < len; i++){
            if(nums[i] != i + 1)    //如果位置正确, nums[i] == i + 1
                positioning(nums, nums[i]); //使元素放到正确的位置
        }
        List<Integer> list = new ArrayList<>(len / 3 + 1);
        for(int i = 0; i < len; i++){
            if(nums[i] != i + 1)
                list.add(i + 1);
        }
        return list;
    }
    public void positioning(int[] nums, int value){
            int t = nums[value - 1]; //取得value元素正确位置上的值
            nums[value - 1] = value; //将value元素放到正确的位置
            if(t != nums[t - 1])     //如果value元素正确位置上原来的值t的正确位置上的值不等于t
                positioning(nums, t); //使元素t放到正确的位置
    }
    
}
//60%
