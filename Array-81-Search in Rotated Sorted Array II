Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Write a function to determine if a given target is in the array.

The array may contain duplicates.
==============================================
class Solution {
    public boolean search(int[] nums, int tar) {
        int len = nums.length;
        if(len == 0)
            return false;
        
        int l = 0;
        int r = len - 1;
        int mid = (l + r) / 2;
        while(l <= r){
            if(nums[mid] == tar)
                return true;
            else if(nums[l] < nums[mid]){ //左边是升序排列
                if(tar < nums[l] || tar > nums[mid])
                    l = mid + 1;
                else
                    r = mid - 1;
            }
            else if(nums[l] > nums[mid]){ //断层出现在左边
                if(tar < nums[mid] || tar > nums[r])
                    r = mid - 1;
                else
                    l = mid + 1;
            }
            else //[l]==[mid], 跳过左端的相同的元素
                l++;
            mid = (l + r) / 2;
        }
        return false;
    }
}
//9%, 第一个柱形
