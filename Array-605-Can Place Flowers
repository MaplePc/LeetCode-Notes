Suppose you have a long flowerbed in which some of the plots are planted and some are not. 
However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.

Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), 
and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.

Example 1:
Input: flowerbed = [1,0,0,0,1], n = 1
Output: True
Example 2:
Input: flowerbed = [1,0,0,0,1], n = 2
Output: False
Note:
The input array won't violate no-adjacent-flowers rule.
The input array size is in the range of [1, 20000].
n is a non-negative integer which won't exceed the input array size.
=============================================================
class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int len = flowerbed.length;
        if(n == 0)
            return true;
        int avail = 0;
        if(flowerbed[0] == 0) //如果一开始攒了1个空间
            avail = 2;
        for(int i = 1; i < len; i++){
            if(flowerbed[i] == 0){
                avail++;
                if(avail == 3){ //一般来说需要攒够3个空间才能种一枝新花,  
                    avail = 1;  //最后一个空间是可以共用的
                    n--;
                }
            }
            else
                avail = 0;
        }
        if(avail == 2) //如果最后攒了2个空间
            n--;
        return n <= 0;
    }
}
//60%-90%
