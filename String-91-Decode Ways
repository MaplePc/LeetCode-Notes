A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.
=====================================
class Solution {
    char[] cs;
    boolean error = false;
    int[] map;
    public int numDecodings(String s) {
        if(s.length() == 0)
            return 0;
        cs = s.toCharArray();
        map = new int[cs.length];
        int res = helper(0);
        return error ? 0 : res;
    }
    public int helper(int start){
        if(start == cs.length)
            return 1;
        else if(error || start > cs.length)
            return 0;
        
        if(map[start] > 0)
        	return map[start];
        
        int res = 0;
        if(cs[start] == '1'){
        	if(start + 2 < cs.length && cs[start + 2] == '0')
        		res = helper(start + 1);
        	else if(start + 1 < cs.length && cs[start + 1] == '0')
                res = helper(start + 2);
            else
            	res = helper(start + 1) + helper(start + 2);
        }
        else if(cs[start] == '2'){
        	if(start + 2 < cs.length && cs[start + 2] == '0')
        		res = helper(start + 1);
        	else if(start + 1 < cs.length){
                if(cs[start + 1] == '0')
                    res = helper(start + 2);
                else{
                	res = helper(start + 1);
                	if(cs[start + 1] > '0' && cs[start + 1] < '7')
                		res += helper(start + 2);
                }
            }
            else
            	res = 1;
        }
        else if(cs[start] == '0'){
            error = true;
            return 0;
        }
        else
            res = helper(start + 1);
        map[start] = res;
        return res;
    }
}
//96%, 2ms
//同解法No.1,使用Map和减治法, 不过因为键值对的总数是确定的(char[]的长度), 可以用int[]来作为Map
