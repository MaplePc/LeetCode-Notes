Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].
=============================================
public class Solution {
    public int subarraySum(int[] nums, int k) {
        int len = nums.length;
        int res = 0;
        int sum = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, 1); //不用额外检查sum是否等于k
        for(int i = 0; i < len; i++){
            sum += nums[i];
            if(map.containsKey(sum - k)){
                res += map.get(sum - k);
            }
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return res;
    }
}
//60%
//将数组的一部分看成: 起0, 起1, 起2,...终点i, 终点i+1
//1.用数组原有的空间, 将数组里面每一个元素定义为以当前下标为起点, 至后面的终点之间的所有元素之和;
//2.然后从一个终点迭代到下一个终点时,只需要以前的每一个起点加上下一个终点的元素值
