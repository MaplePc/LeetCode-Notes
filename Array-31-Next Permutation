31. Next Permutation
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1
======================================================================
对代码做法的补充:
在数组中试图找到一个位置最靠后的元素a, 使得它能跟后面的元素中位置最靠后并且值比a大的元素b交换位置, 然后使b后面的所有元素升序排列; 
如果不能找到上述的两个元素, 说明该数组中的元素是降序排列的, 此时令下标和等于length-1的所有元素对互换位置.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
class Solution {
    public void nextPermutation(int[] nums) {
        int len = nums.length;
        if(len < 2){
            return;
        }
        
        int i = len - 2; 
        for(; i > -1 && nums[i] >= nums[i + 1]; i--){ //循环的结果: i的后面的元素逆序排列
            ;
        }
        
        if(i > -1){ //说明nums[i] < nums[i+1]
            for(int j = len - 1; j > i; j--){	//遍历寻找第一个大于nums[i]的元素
                if(nums[j] > nums[i]){
                    swap(nums, i, j); //交换两个元素,并对下标i以后的元素逆序排列
                    reverse(nums, i + 1);                    
                    return;
                }
            }
        }
        else			//完全逆序排列
            reverse(nums, 0);        
    }
    public static void reverse(int[] a, int start){
        int end = a.length - 1;
        while(start < end){
            swap(a, start++, end--);
        }
    }
    public static void swap(int[] a, int i, int j){
        int t = a[i];
        a[i] = a[j];
        a[j] = t;
    }
}




