31. Next Permutation
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1
======================================================================
对代码做法的补充:
在数组中试图找到一个位置最靠后的元素a, 使得它能跟后面的元素中位置最靠后并且值比a大的元素b交换位置, 然后使b后面的所有元素升序排列; 
如果不能找到上述的两个元素, 说明该数组中的元素是降序排列的, 此时令下标和等于length-1的所有元素对互换位置.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
public void nextPermutation(int[] nums) {
        int len = nums.length;
        if(len < 2){
            return;
        }
        for(int i = len - 2; i > -1; i--){ //子数组[i, length-1]的左边界i不断向左扩展(i初值为length-2)
            for(int j = len - 1; j > i; j--){ //将nums[i]与nums[j](按j=length-1, length-2...即从后往前的顺序)找到的最大的值进行交换
                if(nums[i] < nums[j]){
                    swap(nums, i, j);
                    Arrays.sort(nums, i + 1, len); //对nums中从i+1到len-1的元素进行升序排序
                    return;
                }
            }
        }
        int half = len / 2;           //说明整个数组里面的元素是降序排列,此时只需要把下标为<0, length-1>,<1,length-2>...的元素两两交换就行了
        for(int i = 0; i < half; i++){
            swap(nums, i, len - 1 - i);
        }
    }
    
    public static void swap(int[] a, int i, int j){
        int t = a[i];
        a[i] = a[j];
        a[j] = t;
    }
