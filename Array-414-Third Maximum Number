
Given a non-empty array of integers, return the third maximum number in this array. 
If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]
Output: 1
Explanation: The third maximum is 1.

Example 2:
Input: [1, 2]
Output: 2
Explanation: The third maximum does not exist, so the maximum (2) is returned instead.

Example 3:
Input: [2, 2, 3, 1]
Output: 1
Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.
=================================================
import java.util.TreeSet;
class Solution {
    public int thirdMax(int[] nums) {
        TreeSet<Integer> set = new TreeSet<>(); //元素按值迭代, 使用红黑树实现; 不能指定初始值
        for(int v : nums){
            set.add(v);            
        }
        int[] values = new int[3];
        int index = 0;
        for(Iterator iterator = set.descendingIterator(); index < 3 && iterator.hasNext();){ //降序迭代
			      values[index++] = (Integer)iterator.next();
		    }
        if(index == 3){
            return values[2];
        }
        else{
            return values[0];
        }
    }
}
//7%
