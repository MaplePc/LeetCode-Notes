Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.
==================================
class Solution {
    public int minimumTotal(List<List<Integer>> tri) {
        int row = tri.size();
        if(row == 0)
            return 0;
        
        int[] count = new int[tri.get(row - 1).size()];
        count[0] = tri.get(0).get(0);

        for(int i = 1; i < row; i++){ //从第二行开始
            List<Integer> thisRow = tri.get(i);
            int col = i + 1;

            int last = count[0];
            count[0] = count[0] + thisRow.get(0);
            for(int j = 1; j < col - 1; j++){
                int cur = count[j];
                count[j] = Math.min(last, count[j]) + thisRow.get(j);
                last = cur;
            }
            count[col - 1] = last + thisRow.get(col - 1);
        }
        
        int sum = Integer.MAX_VALUE;
        for(int v : count)
            if(v < sum)
                sum = v;
        return sum;
    }
}
//94%
//计算方法调整了3次...
