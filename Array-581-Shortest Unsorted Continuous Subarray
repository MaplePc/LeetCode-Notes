 
Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.
===================================================
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int len = nums.length;
        if(len < 2)
            return 0;
        int i = 1;
        for(; i < len; i++){
            if(nums[i] < nums[i - 1]) //从左到右遍历
                break;
        }
        if(i == len)
            return 0;
        int startI = i;
        int min = nums[i];        
        for(i++; i < len; i++){ //寻找最小值
            if(nums[i] < min)
                min = nums[i];
        }
        startI = Arrays.binarySearch(nums, 0, startI, min); //找到最小值的插入位置
        if(startI < 0){
            startI = -(startI + 1);
        }
        else
            while(startI < len && nums[startI] == min)
                startI++;
        
        int j = len - 2;
        for(; j > -1; j--)
            if(nums[j] > nums[j + 1])   //从右到左遍历
                break;
        int end = j;
        int max = nums[j];
        for(j--; j > -1; j--)   //寻找最大值
            if(nums[j] > max)
                max = nums[j];
        end = Arrays.binarySearch(nums, end + 1, len, max); //找到最大值的插入位置
        if(end < 0){
            end = -(end + 1) - 1;
        }
        else
            while(end > -1 && nums[end] == max)
                end--;
        return end - startI + 1;
    }
}
//70%-80%
