 
Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.
===================================================
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int len = nums.length;
        if(len < 2)
            return 0;
        int min = Integer.MAX_VALUE; //倒序相邻的两个元素的较小值的最小值
        int max = nums[0];           //最大值
        int endI = -1;               //排序的终点坐标
        for(int i = 1; i < len; i++){
            if(nums[i] >= max)
                max = nums[i];
            else                     //没有被赋值, 说明在此之前的max最起码应该放在i
                endI = i;
            if(nums[i] < nums[i - 1] && nums[i] < min) //倒序相邻的两个元素的较小值的最小值
                min = nums[i];
        }
        if(endI == -1)  //数组升序
            return 0;
        int startI = 0;
        for(; startI < len - 1 && min >= nums[startI]; startI++) //寻找倒序相邻的两个元素的较小值的最小值的正确位置
            ;
        return endI - startI + 1;
    }
}
//90+%不使用二分查找
//时间复杂度:O(n), 主要过程只遍历一次数组
