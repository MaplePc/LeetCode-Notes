Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.

Example 1:
Input: [2,2,3,4]
Output: 3
Explanation:
Valid combinations are: 
2,3,4 (using the first 2)
2,3,4 (using the second 2)
2,2,3
Note:
The length of the given array won't exceed 1000.
The integers in the given array are in the range of [0, 1000].
=============================
public class Solution {
    public int triangleNumber(int[] nums) {
        int count = 0;
        Arrays.sort(nums);
        for (int i = 2; i < nums.length; i++) { //nums[i]是最长边
            int l = 0; //最短边
            int r = i - 1; //次长边
            while(l < r){
                if(nums[l] + nums[r] > nums[i]){
                    count += r - l; //选定l为次长边, r,r+1,...l-1都可作为最短边
                    r--;
                }
                else 
                    l++;
            }
        }
        return count;
    }
}
//80%
