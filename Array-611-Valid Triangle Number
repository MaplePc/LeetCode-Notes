Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.

Example 1:
Input: [2,2,3,4]
Output: 3
Explanation:
Valid combinations are: 
2,3,4 (using the first 2)
2,3,4 (using the second 2)
2,2,3
Note:
The length of the given array won't exceed 1000.
The integers in the given array are in the range of [0, 1000].
=============================
class Solution {
    public int triangleNumber(int[] nums) {
        int len = nums.length;
        Arrays.sort(nums);
        
        int count = 0;
        for(int i = 0; i < len; i++){
            if(nums[i] == 0)
                continue;
            for(int j = i + 1; j < len; j++){
            	int sum = nums[i] + nums[j];
            	if(j + 1 < len){
            		int index = searchLast(nums, sum, j + 1); //寻找最后一个比sum小的数
            		if(sum > nums[index])
            			count += index - j;
            	}
            }
        }
        return count;    
    }
    
    //寻找最后一个比tar小的数
    public int searchLast(int[] nums, int tar, int start){
    	int l = start;
    	int r = nums.length - 1;
    	int mid = 0;
    	while(l < r){
    		mid = (l + r) / 2;
    		if(nums[mid] >= tar)
    			r = mid - 1;
    		else{
    			if(l == mid){ //只剩2个或1个数, 这种情况如果不检测就会陷入死循环
    				if(nums[r] < tar)
    					l = r;
    				break;
    			}
    			else	
    				l = mid;
    		}
    	}
    	return l;
    }
}
//27%
