Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example 1:
[[1,3,1],
 [1,5,1],
 [4,2,1]]
Given the above grid map, return 7. Because the path 1→3→1→1→1 minimizes the sum.
=======================================
class Solution {
    public int minPathSum(int[][] grid) {
        int row = grid.length;
        int col = grid[0].length;
        
        for(int j = 1; j < col; j++) //第0行每一个元素是它与左边所有元素的累加值
            grid[0][j] += grid[0][j - 1];
        for(int i = 1; i < row; i++) //每0列每一个元素是它与上面所有元素的累加值
            grid[i][0] += grid[i - 1][0];
        if(row == 1 || col == 1) //只有一行或只有一列
            return grid[row - 1][col - 1];
        
        for(int i = 1; i < row; i++){
            for(int j = 1; j < col; j++){ //处理剩下的右下角的部分
                grid[i][j] += Math.min(grid[i][j - 1], grid[i - 1][j]); //取上邻和左邻的较小值和自身做加法
            }
        }        
        return grid[row - 1][col - 1];
    }
}
//40%
