Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example 1:
[[1,3,1],
 [1,5,1],
 [4,2,1]]
Given the above grid map, return 7. Because the path 1→3→1→1→1 minimizes the sum.
=======================================
class Solution {
    public int minPathSum(int[][] grid) {
        int row = grid.length;
        int col = grid[0].length;
        int[][] count = new int[row + 1][col + 1];
        count[0][0] = grid[0][0];
        
        if(row == 1){
            int sum = 0;
            for(int j = 0; j < col; j++)
                sum += grid[0][j];
            return sum;
        }
        else if(col == 1){
            int sum = 0;
            for(int i = 0; i < row; i++)
                sum += grid[i][0];
            return sum;
        }
        
        //行数列数至少2
        // if(row <= col){
            for(int j = 0; j < col - 1; j++){ //处理从第0列-第col - 2列第一个元素开始的对角线
                //扩展该对角线上第一个元素
                count[0][j + 1] = grid[0][j + 1] + count[0][j]; //更新当前元素的右邻的sum
                count[1][j] = grid[1][j] + count[0][j]; //更新当前元素的下邻的sum
                
                //扩展该对角线上其他元素
                for(int i = j - 1; i > 0; i--){
                    if(count[j - i][i] < count[j - i - 1][i + 1]) //当前元素的number小于上一个对角线相邻的元素的number
                        count[j - i][i + 1] = grid[j - i][i + 1] + count[j - i][i]; //更新当前元素的右邻的sum
                    count[j - i + 1][i] = grid[j - i + 1][i] + count[j - i][i]; //更新当前元素的下邻的sum
                }
                
                //扩展该对角线上最后一个元素
                if(count[j][0] < count[j - 1][1]) //当前元素的number小于上一个对角线相邻的元素的number
                    count[j][1] = grid[j][1] + count[j][0]; //更新当前元素的右邻的sum
                if(j + 1 < row) //如果有下邻
                    count[j + 1][0] = grid[j + 1][0] + count[j][0]; //更新当前元素的下邻的sum
            }
        
        for(int i = 0; i < row - 1; i++){ //i行
            count[i - 1][col - 1] = grid[i - 1][col - 1] + count[i][col - 1]; //更新当前元素的下邻的sum 
            //i, col - 1 + i - j
            for(int j = i + 1; j < row - 1; j++){ //j行
                if(count[i][col - 1 + i - j] < count[i - 1][col + i - j])
                    count[i][col + i - j] = grid[i][col + i - j] + count[i][col - 1 + i - j]; //更新当前元素的右邻的sum
                count[i + 1][col - 1 + i - j] = grid[i + 1][col - 1 + i - j] + count[i][col - 1 + i - j];
            }
            
            //扩展该对角线上最后一个元素(j = row - 1)
            if(count[i][col + i - row] < count[i - 1][col + i - row + 1]) //更新当前元素的右邻?????
                count[i][col + i - row + 1] = grid[i][col + i - row + 1] + count[i][col + i - row];
            if(i + 1 < row)
                count[i + 1][col + i - row] = grid[i + 1][col + i - row] + count[i][col + i - row];
        }
            
        return count[row - 1][col - 1];
    }
}
