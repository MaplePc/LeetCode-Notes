Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.

Example 1:
Input: [3, 1, 4, 1, 5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.
Example 2:
Input:[1, 2, 3, 4, 5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).
Example 3:
Input: [1, 3, 1, 5, 4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).
Note:
The pairs (i, j) and (j, i) count as the same pair.
The length of the array won't exceed 10,000.
All the integers in the given input belong to the range: [-1e7, 1e7].
=====================================================

class Solution {
    public int findPairs(int[] nums, int k) {
        int len = nums.length;
        if(k < 0 || len < 1)
            return 0;
        HashSet<Integer> set = new HashSet<>(len);
        if(k == 0){
            HashSet<Integer> duplicateSet = new HashSet<>(); //使用两个HashSet来寻找出现了至少2次的元素
            for(int v : nums){
                if(!set.add(v)){    //如果之前set中有v, 返回false
                    duplicateSet.add(v);
                }
            }
            return duplicateSet.size();
        }
        else{
            for(int v : nums){
                set.add(v);
            }
            int count = 0;
            
            for(Iterator<Integer> iter = set.iterator(); iter.hasNext();){ //使用set进行迭代时, (i, j)和(j, i)会重复计算, 所以要除2
                Integer o = iter.next();
                if(set.contains(o - k))
                    count++;
                if(set.contains(o + k))
                    count++;
                //set.remove(o);  //迭代时同时修改会抛出ConcurrentModificationException异常
            }
            return count / 2;
        }
    }
}
//73%
