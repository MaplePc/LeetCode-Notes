Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.

Example 1:
Input: [3, 1, 4, 1, 5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.
Example 2:
Input:[1, 2, 3, 4, 5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).
Example 3:
Input: [1, 3, 1, 5, 4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).
Note:
The pairs (i, j) and (j, i) count as the same pair.
The length of the array won't exceed 10,000.
All the integers in the given input belong to the range: [-1e7, 1e7].
=====================================================
class Solution {
    public int findPairs(int[] nums, int k) {
        int len = nums.length;
        if(k < 0 || len < 1)
            return 0;
        Arrays.sort(nums);      //数组排序
        int count = 0;
        if(k == 0){
            boolean repeat = false; //同一个值是否是否出现>=2次
            for(int i = 1; i < len; i++){
                if(nums[i] == nums[i - 1]){
                    if(repeat == false){
                        count++;
                        repeat = true;                        
                    }
                }
                else{
                    repeat = false;
                }
            }
        }
        else{
            int[] arr = new int[len];
            arr[0] = nums[0];
            int newLen = 1;
            for(int i = 1; i < len; i++){   //复制数组, 值相等的元素只保留一个
                if(nums[i] != nums[i - 1]){
                    arr[newLen++] = nums[i];
                }
            }
            for(int i = 0; i < newLen - 1; i++){
                int pos = Arrays.binarySearch(arr, i + 1, Math.min(newLen, i + k + 1), arr[i] + k);//使用二分查找,注意一点: 元素值+k的下标<=i+k
                if(pos > 0) 
                    count++;
            }
            
        }
        return count;
    }
}
//94%
