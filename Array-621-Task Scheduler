Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.

However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.

You need to return the least number of intervals the CPU will take to finish all the given tasks.

Example 1:
Input: tasks = ["A","A","A","B","B","B"], n = 2
Output: 8
Explanation: A -> B -> idle -> A -> B -> idle -> A -> B.
Note:
The number of tasks is in the range [1, 10000].
The integer n is in the range [0, 100].
==========================================
public class Solution{
	public int leastInterval(char[] tasks, int n) { 
		int[] taskCount = new int[26];
		for (char t : tasks) {
			taskCount[t - 'A']++;
		}

        Arrays.sort(taskCount); //从小到大排序
		
        PriorityQueue<Integer> queue = new PriorityQueue<>(26, Collections.reverseOrder()); //优先输出最大值的队列
        for(int v : taskCount){
        	if(v != 0)
        		queue.add(v);
        }
        
        int time = 0;
        while(!queue.isEmpty()){ //以n为周期去安排任务
        	LinkedList<Integer> temp = new LinkedList<>();
        	int i = 0;
        	while(i <= n){
        		if(!queue.isEmpty()){
        			if(queue.peek() > 1){ //要求放进队列里的元素都是正数
            			temp.add(queue.poll() - 1);
            		}
            		else{
            			queue.poll();
            		}
        		}
        		i++;
        		time++; //当队列为空时,需要插入冷却时间
        		
        		if(temp.isEmpty() && queue.isEmpty())
        			break;
        	}
        	queue.addAll(temp);
        }
		return time;
	}
}
//34%
