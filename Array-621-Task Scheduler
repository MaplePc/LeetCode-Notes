Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.

However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.

You need to return the least number of intervals the CPU will take to finish all the given tasks.

Example 1:
Input: tasks = ["A","A","A","B","B","B"], n = 2
Output: 8
Explanation: A -> B -> idle -> A -> B -> idle -> A -> B.
Note:
The number of tasks is in the range [1, 10000].
The integer n is in the range [0, 100].
==========================================
public class Solution{
	public int leastInterval(char[] tasks, int n) { //不要把n作为任务的周期
		int[] taskCount = new int[26];
		for (char t : tasks) {
			taskCount[t - 'A']++;
		}

        Arrays.sort(taskCount); //从小到大排序
		
        int max_value = taskCount[25] - 1;
        int idle = max_value * n; //假设除了任务数量最多的任务外没有其他任务, 所以每一个周期都需要冷却n个片段
        for(int i = 24; i > -1 && taskCount[i] > 0; i--){
            idle -= Math.min(taskCount[i], max_value);
        }
		return idle > 0 ? idle + tasks.length : tasks.length;
	}
}
//例子: 2,2,3,4,6 res = 17
//周期1: A B C D E
//周期2: A B C D E
//周期3: A B C
//周期4: A B 
//周期5: A 
//周期6: A
//    idle-4-3-2-2 = -1
