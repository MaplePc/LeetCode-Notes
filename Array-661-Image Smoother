Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.

Example 1:
Input:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
Explanation:
For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0
Note:
The value in the given matrix is in the range of [0, 255].
The length and width of the given matrix are in the range of [1, 150].
====================================================================
class Solution {
    public int[][] imageSmoother(int[][] M) {
        int r = M.length;   //行
        int c = M[0].length;//列
        int[][] res = new int[r][c];
        for(int i = 0; i < r; i++){
            for(int j = 0; j < c; j++){ //对于每一个元素, 求中心元素及其周围元素的范围
                int lt_x = i - 1;
                int lt_y = j - 1;
                int rb_x = i + 1;
                int rb_y = j + 1;
                if(i == 0)
                    lt_x++;
                if(j == 0)
                    lt_y++;
                if(i == r - 1)
                    rb_x--;
                if(j == c - 1)
                    rb_y--;
                res[i][j] = grayScale(M, lt_x, lt_y, rb_x, rb_y);
            }
        }
        return res;
    }
    public int grayScale(int[][] M, int lt_x, int lt_y, int rb_x, int rb_y){ //左上角x,y坐标, 右下角x,y坐标, 表示中心元素及其周围元素
        int sum = 0;
        for(int i = lt_x; i <= rb_x; i++){
            for(int j = lt_y; j <= rb_y; j++){
                sum += M[i][j];
            }
        }
        return (int)((float)sum / ((rb_x - lt_x + 1) * (rb_y - lt_y + 1)));
    }
}
//60%-80%
