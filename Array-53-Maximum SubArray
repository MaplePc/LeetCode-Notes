
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.
============================================
class Solution {
	public int maxSubArray(int[] nums) {

		int i = 0;
		int maxI = 0;
		while (i < nums.length && nums[i] <= 0) {
			if (nums[i] > nums[maxI]) {
				maxI = i;
			}
			i++;
		}
		if (i == nums.length)
			return nums[maxI];

		boolean sign = true;
		int newLen = 0; // 新数组待填充的元素下标, 也就是新数组的长度

		while (i < nums.length) { // 合并符号相同的元素,并把它们的值依次放到0,1,2...位置
			nums[newLen] = nums[i++];
			for (; i < nums.length && ((nums[i] > 0) == sign); i++) {
				nums[newLen] += nums[i];
			}
			newLen++;
			sign = !sign;
		}

		int largestSum = nums[0];
		int sum = 0;
		for (i = 0; i + 2 < newLen; i += 2) { //i=0, 2, 4...都是正数 
			if (nums[i] > -nums[i + 1]) { //如果nums[i] + nums[i + 1] > 0, 将和加到nums[i+2]
				nums[i + 2] += nums[i] + nums[i + 1];
			}
			largestSum = nums[i] > largestSum ? nums[i] : largestSum; //比较合并前nums[i]与largestSum的值
		}
		return nums[i] > largestSum ? nums[i] : largestSum; //返回nums[i]与largestSum中的较大值
	}
}
