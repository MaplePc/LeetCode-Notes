Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.

For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).

Note: You may assume that n is not less than 2 and not larger than 58.
===========================================
class Solution {
    public int integerBreak(int n) {
        int dp[] = new int[n + 1];
        dp[1] = dp[2] = 1;
        for(int i = 3; i <= n; i++){
            for(int j = 1; j * 2 <= i; j++){
                int max = Math.max(j, dp[j]) * Math.max(i - j, dp[i - j]); //分成j和i - j两部分, 每部分取分解前和分解后的最大值
                dp[i] = Math.max(max, dp[i]);
            }
        }
        return dp[n];
    }

}
//70%
