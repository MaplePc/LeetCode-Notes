Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
==============================================
class Solution {
    public int numTrees(int n) {
        int[] G = new int[n + 2];
        G[0] = 1;
        G[1] = 1;
        for(int i = 2; i <= n; i++){
            int j = 0, k = i - 1;
            for(; j < k; j++, k--) //基于对称性
                G[i] += 2 * G[j] * G[k];
            if(j == k)
                G[i] += G[j] * G[k];
        }
            
        return G[n];
    }
}
//100%(来源于天梯榜)
//定义G(n)为所求, 即连续n个数的二叉搜索树的个数, {1, 2, 3, 4}与{5, 6, 7, 8}的二叉搜索树的个数是一样的
//在连续的n个数中, 依次选定一个数作为根, 然后以这个数为根的二叉搜索树的个数 = 左子树的个数 * 右子树的个数
//G(n) = G(0) * G(n - 1) + G(1) * G(n - 2) + G(2) * G(n - 3) + ... + G(n - 1) * G(0); 

//可以使用对称性简化计算
