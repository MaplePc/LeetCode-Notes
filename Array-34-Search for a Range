Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
=====================================================
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] res = new int[]{-1, -1};
        if(nums.length == 0)
            return res;
        int start = searchStart(nums, target);
        int end = searchEnd(nums, target) - 1;
        if(start > end)
            return res;
        else
            return new int[]{start, end};
    }
    public int searchStart(int[] nums, int target){//第一个插入位置
        int l = 0;
        int r = nums.length;//二分查找插入位置, r = len;
        int mid = 0;
        while(l < r){
            mid = l + (r - l) / 2;
            if(target > nums[mid])
                l = mid + 1;
            else
                r = mid;
        }
        return l;
    }
    public int searchEnd(int[] nums, int target){//最后一个插入位置, 减一就是最后一个target的坐标
        int l = 0;
        int r = nums.length;//二分查找插入位置, r = len;
        int mid = 0;
        while(l < r){
            mid = l + (r - l) / 2;
            if(target < nums[mid])
                r = mid;
            else
                l = mid + 1;
        }
        return l;
    }    
}
//29%
