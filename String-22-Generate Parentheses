Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
================================================================
class Solution {
    List<String> res = new LinkedList<>();
    public List<String> generateParenthesis(int n) {
        help(new StringBuilder(), n, 0);
        return res;
    }
    public void help(StringBuilder sb, int left, int right){
    	if(left == 0 && right == 0)
    		res.add(sb.toString());
    	
    	if(left != 0 && right != 0){
    		help(new StringBuilder(sb).append('('), left - 1, right + 1);
    		help(sb.append(')'), left, right - 1);
    	}
    	else if(left != 0){
    		help(sb.append('('), left - 1, right + 1);
    	}
    	else{
    		for(int i = 0; i < right; i++)
    			sb.append(')');
    		res.add(sb.toString());
    	}
    }
}
