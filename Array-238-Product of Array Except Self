Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)
============================================
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int len = nums.length; //len >= 2
        int[] res = new int[len];
        
        res[0] = 1;
        for(int i = 1; i < len; i++){ //往res数组中填入该位置之前元素的乘积
            res[i] = res[i - 1] * nums[i - 1];
        }
        
        int behind = 1; //该位置之后的元素的乘积
        for(int i = len - 1; i > -1; i--){
            res[i] *= behind;
            behind *= nums[i];
        }
        return res;
    }
}
