Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)
============================================
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int len = nums.length; //len >= 2
        int[] res = new int[len];
        multiply(nums, res, 0, 1);
        return res;
    }
    
    //index 当前元素的下标
    //front 当前元素之前的元素的积
    //return 当前元素 * 当前元素之后的元素的积
    public int multiply(int[] nums, int[] res, int index, int front){
        if(index == nums.length - 1){
            res[index] = front;
            return nums[index];
        }
        
        int behind = multiply(nums, res, index + 1, front * nums[index]);
        res[index] = front * behind;
        return nums[index] * behind;
    }
}
//堆栈溢出
