Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.

You may assume that each input would have exactly one solution and you may not use the same element twice.

Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2
=================================================
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int len = nums.length;
        int l = 0;
        int r = len - 1;
        while(l < r){
            int sum = nums[l] + nums[r];
            if(sum < target)
                l = binarySearch(nums, l, r, target - nums[r], true);
            else if(sum > target)
                r = binarySearch(nums, l, r, target - nums[l], false);
            else
                return new int[] {l + 1, r + 1};
        }    
        return null;    //依题意知不可能发生
    }
    //sign为true, 寻找第一个>=target的元素, 返回其下标(作为新的l)
    //否则, 寻找第一个<=target的元素, 返回其下标(作为新的r)
    public int binarySearch(int[] nums, int l, int r, int target, boolean sign){
        int mid = 0;
        while(l <= r){  //注意这里是<=; 当取等号时,执行后得到: nums[r] < target=nums[mid] < nums[l]
            mid = l + (r - l) / 2;
            if(target > nums[mid])
                l = mid + 1;
            else if(target < nums[mid])
                r = mid - 1;
            else
                return mid;
        }
        return sign ? l : r;
    }
}
//99%
