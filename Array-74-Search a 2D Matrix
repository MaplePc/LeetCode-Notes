Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.
==========================================
class Solution {
    public boolean searchMatrix(int[][] m, int tar) {
        int row = m.length;
        if(row == 0)
            return false;
        int col = m[0].length;
        if(col == 0)
            return false;
		
        int top = 0; //定义为tar所在的行
        int bottom = row; 
        int mid = 0;
        while(top < bottom){ //先确定tar在哪一行
            mid = top + (bottom - top) / 2;
            if(tar > m[mid][col - 1])
                top = mid + 1;
            else if(tar < m[mid][col - 1])
                bottom = mid;
            else
                return true;
        }
        
        if(top == row)
            return false;
        
        int pos = Arrays.binarySearch(m[top], tar); //再从该行里面二分查找
        if(pos > -1)
            return true;
        else
            return false;
    }
}
//16%
