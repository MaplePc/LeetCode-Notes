Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

For example,
Given nums = [0, 1, 3] return 2.

Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?
===============================
class Solution {
    public int missingNumber(int[] nums) { //寻找丢失的数应该存在的位置
        Arrays.sort(nums);
        int len = nums.length;
        int l = 0;
        int r = len;
        int mid = 0;
        while(l < r){
            mid = l + (r - l) / 2;
            if(nums[mid] == mid)
                l = mid + 1;
            else
                r = mid;
        }
        return l;
    }
}
//11%
//没看清楚题目,以为数组是升序的, 如果数组已经是升序的话, 那么这个算法就是O(lgn)
