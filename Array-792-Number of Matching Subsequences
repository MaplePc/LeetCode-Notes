Given string S and a dictionary of words words, find the number of words[i] that is a subsequence of S.

Example :
Input: 
S = "abcde"
words = ["a", "bb", "acd", "ace"]
Output: 3
Explanation: There are three words in words that are a subsequence of S: "a", "acd", "ace".
Note:

All words in words and S will only consists of lowercase letters.
The length of S will be in the range of [1, 50000].
The length of words will be in the range of [1, 5000].
The length of words[i] will be in the range of [1, 50].
============================================
class Solution {
    public int numMatchingSubseq(String S, String[] words) {
        Map<String, Boolean> results = new HashMap<>();
        int count = 0;
        for(String str : words){
            if(exists(results, str, S))
                count++;
        }    
        return count;
    }
    
    public boolean exists(Map<String, Boolean> results, String str, String tar){
        Boolean b = results.get(str); //在HashMap中比较字符串
        if(b != null)
            return b;
        
        int index = 0;
        for(int i = 0; i < str.length(); i++){
            index = tar.indexOf(str.charAt(i), index); //又比较字符串
            if(index < 0){
                results.put(str, false);
                return false;
            }
            index++;
        }
        results.put(str, true);
        return true;
    }
}
//其他人的solution, 98%, 缓存了前面的字符串的查找结果, 但如果words中所有的字符串都不相同, 那么效果反而是最差的
