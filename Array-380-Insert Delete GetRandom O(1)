Design a data structure that supports all following operations in average O(1) time.

insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.
===================================
class RandomizedSet {
	HashSet<Integer> set;
	
    /** Initialize your data structure here. */
    public RandomizedSet() {
        set = new HashSet<>();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        return set.add(val);
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        return set.remove(val);
    }
    
    /** Get a random element from the set. */
    public int getRandom() { //耗时: 随机选取元素时需要迭代
        int random = (int) (Math.random() * set.size());
        int i = 0;
        for(Iterator<Integer> iter = set.iterator(); iter.hasNext(); i++){
        	if(i == random){
        		return iter.next();
        	}
        	iter.next();
        }
        return -1; //impossible
    }
}
// <10%
