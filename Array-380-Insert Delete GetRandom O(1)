Design a data structure that supports all following operations in average O(1) time.

insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.
===================================
class RandomizedSet {
    HashMap<Integer, Integer> map;
    ArrayList<Integer> list;
    
    /** Initialize your data structure here. */
    public RandomizedSet() {
        map = new HashMap<>();
        list = new ArrayList<>();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if(!map.containsKey(val)){
            map.put(val, list.size());
            list.add(val);
            return true;
        }
        return false;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        Integer index = null;
        if((index = map.remove(val)) != null){
            int size = list.size();
            if(index < size - 1){ //在这里元素的顺序不重要, 为了避免移动list中欲删除元素后面的元素, 把最后一个元素移动到欲删除的元素的位置
                map.put(list.get(size - 1), index);
                list.set(index, list.get(size - 1));
            }
            list.remove(size - 1); //注意: 这里删除下标为index的元素
            
            return true;
        }
        return false;
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        return list.get((int)(Math.random() * list.size()));
    }
}
//99%
