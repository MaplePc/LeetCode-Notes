Design a data structure that supports all following operations in average O(1) time.

insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.
===================================
class RandomizedSet {
	HashSet<Integer> set;
	ArrayList<Integer> list;
	
    /** Initialize your data structure here. */
    public RandomizedSet() {
        set = new HashSet<>();
        list = new ArrayList<>();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        boolean result = set.add(val);
        if(result){
        	list.add(val);
        }
        return result;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
    	boolean result = set.remove(val);
        if(result){
        	list.remove((Integer)val); //耗时: 删除元素时需要遍历
        }
    	return result;
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        int random = (int) (Math.random() * set.size());
        return list.get(random);
    }
}
// <10%
