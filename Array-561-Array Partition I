Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.

Example 1:
Input: [1,4,3,2]

Output: 4
Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).
Note:
n is a positive integer, which is in the range of [1, 10000].
All the integers in the array will be in the range of [-10000, 10000].
===================================================
class Solution {
    public int arrayPairSum(int[] nums) {
        int len = nums.length; 
        int max = nums[0];
        int min = nums[0];
        for(int v : nums){
            if(v > max)
                max = v;
            else if(v < min)
                min = v;
        }
        
        int[] hash = new int[max - min + 1];
        for(int v : nums){
            hash[v - min]++;
        }
        
        int lastValue = 0; //比当前值小的值
        int lastCount = 0; //比当前值小的值的个数
        int sum = 0;
        int hashLen = hash.length;
        for(int i = 0; i < hashLen; i++){
            if(hash[i] > 0){ //元素值存在
                if(lastCount == 1){ //恰比其小的元素个数余1
                    sum += lastValue; //(lastValue, i + min)组成一pair
                    hash[i]--;
                }
                sum += hash[i] / 2 * (i + min); //求(i + min, i + min)的组合数
                hash[i] %= 2;
                
                lastValue = i + min;    //保存当前值和个数
                lastCount = hash[i];
            }
        }
        return sum;
    }
}
//99%
