Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.

Example 1:
Input: [1,4,3,2]

Output: 4
Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).
Note:
n is a positive integer, which is in the range of [1, 10000].
All the integers in the array will be in the range of [-10000, 10000].
===================================================
import java.util.Map.Entry;
class Solution {
    public int arrayPairSum(int[] nums) {
        int len = nums.length;        
        TreeMap<Integer, Integer> map = new TreeMap<>(); //key为数组元素值, value为元素出现次数
        for(int v : nums){
            if(map.containsKey(v)){
                map.put(v, map.get(v) + 1);
            }
            else
                map.put(v, 1);
        }
        int lastValue = 0;
        int lastCount = 0;
        int sum = 0;
        for(Entry<Integer, Integer> e : map.entrySet()){
            int k = e.getKey();   //元素值
            int v = e.getValue(); //出现次数
            if(lastCount == 1){
                sum += lastValue;
                v--;
            }	
            sum += v / 2 * k;
            lastCount = v % 2;
            lastValue = k;
		}
        return sum;
    }
}
//1%
