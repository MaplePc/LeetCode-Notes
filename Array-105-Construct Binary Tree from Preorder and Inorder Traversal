Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.
============================================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
class Solution { //改进版
    private int pre = 0;
    private int in = 0;
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return helper(preorder, inorder, null); 
    }
    
    public TreeNode helper(int[] preorder, int[] inorder, Integer rootVal){
        if(pre >= preorder.length || in >= inorder.length || (rootVal != null && rootVal == inorder[in]))
            return null;
        TreeNode node = new TreeNode(preorder[pre++]);
        node.left = helper(preorder, inorder, node.val);
        in++;
        
        node.right = helper(preorder, inorder, rootVal);
        
        return node;
    }
}
//98%

//原版(有bug):
class Solution {
    
    private int pre = 0;
    private int in = 0;
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        //########如果Integer.MIN_VALUE也出现在数组中, 算法就可能错误了#########
        return helper(preorder, inorder, Integer.MIN_VALUE);
    }
    
    private TreeNode helper(int[] preorder, int[] inorder, int rootVal) {
        if (pre >= preorder.length || in >= inorder.length || inorder[in] == rootVal) {
            return null;
        }
        TreeNode root = new TreeNode(preorder[pre++]);
        root.left = helper(preorder, inorder, preorder[pre - 1]);
        in++;
        root.right = helper(preorder, inorder, rootVal);
        return root;
    }
}
//98%
