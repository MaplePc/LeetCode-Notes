Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.
============================================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
class Solution { //改进版
    private int pre = 0;
    private int in = 0;
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return helper(preorder, inorder, null); 
    }
    
    public TreeNode helper(int[] preorder, int[] inorder, Integer rootVal){
        //构造左子树时到达父结点; 构造右子树时到达父结点的父结点
        if(pre >= preorder.length || in >= inorder.length || (rootVal != null && rootVal == inorder[in])) 
            return null;
        TreeNode node = new TreeNode(preorder[pre++]);
        node.left = helper(preorder, inorder, node.val); //构造左子树,以当前结点为界
        in++; //与pre++操作相对应
        
        node.right = helper(preorder, inorder, rootVal); //构造右子树, 以当前结点的父结点为界
         
        return node;
    }
}
//98%
//例子: 每个在前序数组中依次出现的结点, 在中序数组中, 该结点左边的为左子树, 右边直到其父结点的为右子树
//前序遍历: 1 2 4 7 3 5 6 8
//中序遍历: 4 7 2 1 5 3 8 6
