Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's 
in their binary representation and return them as an array.

Example:
For num = 5 you should return [0,1,1,2,1,2].

Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) 
possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.
============================
class Solution {
    public int[] countBits(int n) {
        if(n == 0)
            return new int[]{0};
        else if(n == 1)
            return new int[]{0,1};
        int res[] = new int[n + 1];
        res[0] = 0;
        res[1] = 1;
        for(int i = 2, start = 0, threshold = 4; i <= n; ){
            if(i == threshold){
                start = 0;
                threshold *= 2;
            }
            res[i++] = res[start++] + 1;
        }
        return res;
    }
}
//100%
//找规律, 2, 4, 8, 16...是重复出现的节点
