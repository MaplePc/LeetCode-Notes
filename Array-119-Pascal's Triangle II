Given an index k, return the kth row of the Pascal's triangle.

For example, given k = 3,
Return [1,3,3,1].

Note:
Could you optimize your algorithm to use only O(k) extra space?
=================================================================
class Solution {
    public List<Integer> getRow(int rowIndex) {
        int[] array = new int[rowIndex + 1]; //这里使用一维数组, 空间为rowIndex + 1, 即空间复杂度为O(n)
        for(int i = 0; i <= rowIndex; i++){ //i为每一个行最后一个元素的下标
            int temp = array[0] = 1;        
            for(int j = 1; j < i; j++){     //在这里, temp为上一行下标为j - 1的元素值, 即array[i-1][j-1](当使用二维数组时)
                array[j] = temp +  (temp = array[j]); //等价于使用array[i-1][j-1] + array[i-1][j](当使用二维数组时)
            }
            array[i] = 1;
        }
        List<Integer> intList = new ArrayList<>(rowIndex + 1);
        for(int i = 0; i <= rowIndex; i++){ //不能直接使用(List)Arrays.asList(array),asList方法会把int[]作为一个元素直接转换,这样会得到List<int[]>
            intList.add(array[i]);
        }
        return intList;
    }
}
