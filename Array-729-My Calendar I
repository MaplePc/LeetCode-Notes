class MyCalendar {
    private int[] intervals = new int[200];
    private int count = 0;    
    public boolean book(int start, int end) {
        if(start >= end)
            return false;
        
        if(count == 0){
            intervals[0] = start;
            intervals[1] = end;
            count += 2;
            return true;
        }
        
        //二分查找找到第一个小于等于start的数的下标
        int l = 0; 
        int r = count - 1;
        int mid = 0;
        while(l < r){
            mid = (l + r) / 2 + 1; //注意, 因为只有右边界会收缩, 所以每一次都需要保证mid <= l
            if(intervals[mid] > start)
                r = mid - 1;
            else if(intervals[mid] <= start)
                l = mid;
        }
        
        if(intervals[l] <= start){ //找到
                if(l % 2 != 0 && (l + 1 == count || intervals[l + 1] >= end)){
                   add(l + 1, start, end);
                    return true;
                }
            
        }
        else if(intervals[0] >= end){ //所有的左边界都比start大, 所有元素后移
            add(0, start, end); //插入到最前面
            return true;
        }    
        return false;
    }
    
    private void add(int pos, int start, int end){
        if(count == intervals.length){
            int[] newArr = new int[count + 300];
                System.arraycopy(intervals, 0, newArr, 0, pos);
                newArr[pos] = start;
                newArr[pos + 1] = end;
                System.arraycopy(intervals, pos, newArr, pos + 2, count - pos);
                intervals = newArr;
                count += 2;
        }
        else{
            System.arraycopy(intervals, pos, intervals, pos + 2, count - pos);
                intervals[pos] = start;
                intervals[pos + 1] = end;
                count += 2;
        }
    }
}
//95%
