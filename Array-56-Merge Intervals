Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].
===============================================
import java.util.Comparator;

class Solution {
	public List<Interval> merge(List<Interval> intervals) {
		if(intervals == null || intervals.size() < 2){
			return intervals;
		}
        
        int size = intervals.size();
		//System.out.println(intervals.getClass());//class java.util.ArrayList
	intervals.sort(new StartComparator()); //对List按start进行排序
        
        ArrayList<Interval> list = new ArrayList<>(size);
        
		Interval left = intervals.get(0);
        list.add(left);
		for(int i = 1; i < size; i++){
			Interval current = intervals.get(i);
			if(left.end >= current.start){ //合并: 需要修改已经在list中的left的end属性
				if(left.end < current.end){
					left.end = current.end;
				}
			}
			else{ //不合并
                list.add(current);
                
				left = current;
			}
		}
		return list;

	}

	public static class StartComparator implements Comparator {
		@Override
		public int compare(Object o1, Object o2) {
			Interval i1 = (Interval) o1;
			Interval i2 = (Interval) o2;
			return i1.start - i2.start;
		}
	}
}
//87%; 
