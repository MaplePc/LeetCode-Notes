Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:
Input: [1, 2, 2, 3, 1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:
Input: [1,2,2,3,1,4,2]
Output: 6
Note:

nums.length will be between 1 and 50,000.
nums[i] will be an integer between 0 and 49,999
===============================================
class Solution {
	public static class Node {
		int start;
		int degree;

		public Node(int s, int d) {
			start = s;
			degree = d;
		}
	}

	public int findShortestSubArray(int[] nums) {
        Map<Integer, Node> map = new HashMap<>();
        int degree = 0;
        int length = 0;
        for(int i = 0; i < nums.length; i++){
            Node n = map.get(nums[i]);
            if(n == null){
                n = new Node(i, 1);
                map.put(nums[i], n);
            }
            else
                n.degree++;
                
                if(n.degree == degree){
                    length = Math.min(length, i - n.start + 1);
                }
                else if(n.degree > degree){
                    degree = n.degree;
                    length = i - n.start + 1;
                }
            
        }
		return length;
    }
}
//97%
//Node还可以使用int[2]代替
//甚至可以不用Map, 用三个int[](或char[])
