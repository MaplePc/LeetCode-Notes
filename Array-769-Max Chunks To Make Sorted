Given an array arr that is a permutation of [0, 1, ..., arr.length - 1], we split the array into some number of "chunks" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.

What is the most number of chunks we could have made?

Example 1:

Input: arr = [4,3,2,1,0]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.
Example 2:

Input: arr = [1,0,2,3,4]
Output: 4
Explanation:
We can split into two chunks, such as [1, 0], [2, 3, 4].
However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.
Note:

arr will have length in range [1, 10].
arr[i] will be a permutation of [0, 1, ..., arr.length - 1].
===========================================
class Solution {
    public int maxChunksToSorted(int[] arr) {
        int min = 0;
        int max = 0;
        int count = 0;
        for(int i = 0; i < arr.length; i++){
            if(arr[i] == min){ //找到新的一段序列的起始值
                if(max > i){ //这一段序列中具有位于序列后面的值, 需要扩展序列长度
                    for(i++; i <= max; i++)
                        if(arr[i] > max)
                            max = arr[i];
                    i--; //旧序列结束位置
                }
                //这一段序列中所有位置的值都找到了
                count++; 
                
                min = i + 1; //新序列开始
                max = min;
                               
            }
            else if(arr[i] > max)
                max = arr[i];
        }
        
        return count;
    }
}
//5ms, O(n)
