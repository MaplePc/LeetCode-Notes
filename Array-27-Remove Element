Given an array and a value, remove all instances of that value in place and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example:
Given input array nums = [3,2,2,3], val = 3

Your function should return length = 2, with the first two elements of nums being 2.
#####################################################
public int removeElement(int[] nums, int val) {
        int len = nums.length;
        if(len == 0)
            return 0;
        int i = 0;
        int j = len - 1; //设置两个指针,分别从首尾两个方向寻找等于val和不等于val的元素, 两个方向都找到后,
                         //把从尾部往头方向找到的不等于val的元素赋值给从首部往尾方向找到的等于val的元素
        while(i < j){		//一趟需要判断2i+3j(相对于问题规模)
            if(nums[i] != val)
                i++;
            else if(nums[j] == val)
                j--;
            else{
                nums[i++] = nums[j--];
            }            
        }
        if(nums[j] == val)
            return j;
        else
            return j + 1;
    }  
