Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.
For Example:
 1, 8, 6, 2, 5, 4, 8, 3, 7
 should return 7 * 7 = 49
 对题目的理解: 木桶能装多少水是由最短板决定的, 当非最长的木板(当有多个最长的木板的时候不影响)找到相距最远的第一个比它长的木板的时候, 就可以从考虑范围里面剔除了
 关键点: 因为数组的对称, 木板可以从左右两个方向被剔除
 ==============================================================
class Solution {
    public int maxArea(int[] height) {
        int len = height.length;
        int i = 0;
        int j = len - 1;
        int maxArea = 0;
        while(i < j){
            int left = height[i];
            int right = height[j];
            int area = Math.min(left, right) * (j - i);
            if(area > maxArea)
                maxArea = area;
            if(left < right){
                i++;
                while(i < j && height[i] <= left)
                    i++;
            }
            else{
                j--;
                while(i < j && height[j] <= right)
                    j--;
            }
        }
        return maxArea;
    }
}
//80%-90%
