Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
=======================================================
class Solution {
    List<List<Integer>> res = new ArrayList<>();
    int min;
    int max;
    int[] hash;
	public List<List<Integer>> threeSum(int[] nums) {
		int len = nums.length;
		if (len < 3)
			return res;
		TreeSet<Integer> positiveSet = new TreeSet<>();
		TreeSet<Integer> negetiveSet = new TreeSet<>();
		int zeroCount = 0;

		max = nums[0];
		min = nums[1];
		for (int v : nums) {
			if (v == 0)
				zeroCount++;
			if (v > max)
				max = v;
			else if (v < min)
				min = v;
		}
		max = Math.max(Math.abs(max), Math.abs(min));
		min = -max;
		hash = new int[max - min + 1];
		for (int v : nums) {
			hash[v - min]++;
			if (v > 0)
				positiveSet.add(v);
			else if (v < 0)
				negetiveSet.add(v);
		}

		if (zeroCount >= 3) { // 至少包含了3个0
			addTriplets(0, 0, 0);
		}
		if (zeroCount > 0) { // 包含了0
			for (Iterator<Integer> iter = positiveSet.iterator(); iter.hasNext();) {
				int v = iter.next();
				if (hash[-v - min] > 0) {
					addTriplets(0, v, -v);
				}
				System.out.println(v);
			}
		}

		// 一个正数两个负数
		for (Iterator<Integer> iter = positiveSet.iterator(); iter.hasNext();) { //对正数集迭代, 每次取一个正数, 查看在负数集中能否找到两个相应负数
			int v = (Integer) iter.next();
			if (v == 1)
				continue;
			SortedSet<Integer> halfSet = negetiveSet.subSet(-(v - 1), -v / 2); //取后半部分的负数
			searchTriplets(halfSet, v);
		}
		// 一个负数两个正数
		for (Iterator<Integer> iter = negetiveSet.iterator(); iter.hasNext();) { //对负数集迭代,每次取一个负数,查看在正数集中能否找到两个相应正数
			int v = iter.next();
			if (v == -1)
				continue;
			SortedSet<Integer> halfSet = positiveSet.subSet(-(v / 2 - 1), -v); //取后半部分的正数
			searchTriplets(halfSet, v);
		}
		return res;

	}

	public void searchTriplets(SortedSet<Integer> searchSet, int v) {
		for (Iterator<Integer> subIter = searchSet.iterator(); subIter.hasNext();) {
			int e = subIter.next();
			if (hash[(-v - e) - min] > 0)
				addTriplets(v, e, -v - e);
		}
		int half = v / 2;
		if (v == 2 * half && hash[-half - min] > 1) // v能否被整除
			addTriplets(v, -half, -half);
	}

	public void addTriplets(int a, int b, int c) {
		List<Integer> triplets = new ArrayList<>(3);
		triplets.add(a);
		triplets.add(b);
		triplets.add(c);
		res.add(triplets);
	}
}
//13%
